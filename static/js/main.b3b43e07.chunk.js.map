{"version":3,"sources":["pages/LandingPage.js","db/questions-db.js","db/keys.js","factory/DisplayMaker.js","media/cup.png","media/trash.jpeg","pages/CompletionPage.js","factory/Validator.js","pages/Play.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","props","handleTextBox","e","preventDefault","setState","name","target","value","trim","readyUpAndStart","state","history","push","pathname","data","userName","alert","showCircle","start","this","className","onClick","placeholder","onChange","icon","faLongArrowAltRight","Component","withRouter","ANSWER_TYPES","questions","key","topic","title","resources","settings","hasHTML","type","points","possibleAnswers","feedback","expected","hasStyles","style","options","letter","text","isAnswer","whitespace","correctAnswer","NumToAlpha","num","DisplayMaker","handleOnChange","handleOnItemSelected","onAnswered","reviewMode","selected","multiSelected","textEntry","chosenAnswer","answer","ans","question","answers","map","index","id","reviewAnswerAndGetProps","pushAnswerToState","toString","obj","filter","length","rem","ready","answerKey","isIn","ansIsSelected","answerIsSelected","pushMultipleAnswersToState","createDisplayForMultipleAnswerQuestion","createDisplayForSingleQuestion","createDisplayForTextEntryAnswers","renderContent","CompletionPage","sheet","marginTop","rel","href","wasRight","color","width","border","height","background","earned","total","forEach","pointsEarned","score","Number","calculateTotal","zIndex","numberOfPieces","src","trash","cup","alt","fontWeight","fontSize","toggleReviewMode","toggleModal","renderLoaders","textDecoration","Validator","status","result","validateMultipleAnswerQuestion","correct","wrong","validateEntryAnswerQuestion","validateSingleType","replace","FORWARD","BACK","Play","currentQuestion","currentQuestionIndex","questionReported","reportError","complete","playerSheet","playerName","bind","moveToQuestion","params","location","val","classes","Q","getQuestionButtonClasses","dangerouslySetInnerHTML","__html","messageBody","email","queInView","getPlayersChosenAnswersForQuestion","faLongArrowAltLeft","direction","ind","setNewQuestion","answerState","answerIsCorrect","playerAnswerObj","questionKey","alreadyAnsweredQuestions","currentQuestionHasBeenAnsweredBefore","ansObj","recordedAnswers","margin","paddingTop","padding","renderQuestions","renderQuestionTitle","showFootItems","textAlign","rows","faCheckCircle","submitReport","App","path","component","exact","render","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3b43e07.chunk.js","sourcesContent":["import { faLongArrowAltRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport \"./../App.css\";\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCircle: true,\n      start: false,\n      name: \"\",\n    };\n  }\n\n  handleTextBox = (e) => {\n    e.preventDefault();\n    this.setState({ name: e.target.value.trim() });\n  };\n\n  readyUpAndStart = (e) => {\n    e.preventDefault();\n    const { name } = this.state;\n    if (!name) {\n      alert(\"Please provide a valid name in order to start the game\");\n      return;\n    }\n    this.props.history.push({\n      pathname: \"/play\",\n      data: { userName: this.state.name },\n    });\n  };\n  render() {\n    const { showCircle, start } = this.state;\n    return (\n      <div className=\"c-container\">\n        <div className=\"up-div\">\n          <h1>WELCOME TO ORANGE-GAMES</h1>\n          <h3>\n            Think you are a CSS champion? <br /> Lets Find Out!\n          </h3>\n        </div>\n\n        {showCircle && (\n          <div\n            className=\"circle lift\"\n            onClick={() => this.setState({ showCircle: false, start: true })}\n          ></div>\n        )}\n        {start && (\n          <div className=\"name-area lift\">\n            <h3>TYPE YOUR FULL NAME IN THE BOX BELOW</h3>\n            <input\n              className=\"name-box\"\n              placeholder=\"Enter name...\"\n              onChange={this.handleTextBox}\n            />\n            <button className=\"go-btn\" onClick={(e) => this.readyUpAndStart(e)}>\n              <FontAwesomeIcon icon={faLongArrowAltRight} />\n            </button>\n          </div>\n        )}\n        <div className=\"down-div\">\n          <div className=\"content\">\n            <center>\n              <p>\n                Orange-Games is a platform that allows you to build on your CSS\n                knowledge by answering core css questions that address the\n                shortcomings and misunderstandings of Css application in our\n                daily lives . Whether you are a beginner or experienced with CSS\n                already, there is space for everyone! <br />\n                Tap on the START button to get started right away!\n              </p>\n            </center>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(LandingPage);\n","export const ANSWER_TYPES = {\n  SINGLE: \"SINGLE\",\n  MULTIPLE: \"MULTIPLE\",\n  DRAG_AND_DROP: \"DRAG AND DROP\",\n  TEXT_ENTRY: \"TEXT ENTRY\",\n};\n\nexport const questions = [\n  {\n    key: \"2f3fd958-b047-4e31-a888-a2481e46e0a8\",\n    topic: {\n      title: \"CSS SELECTORS\",\n      resources: \"https://www.w3schools.com/css/css_selectors.asp\",\n    },\n    settings: { hasHTML: true },\n    type: ANSWER_TYPES.MULTIPLE,\n    points: 10,\n    title: `Which of the following is an acceptable way of setting a background color of <span style='font-weight:bold; color:red'>red</span> to a div in css? Select all that apply.`,\n\n    possibleAnswers: {\n      feedback:\n        \"CSS is able to read its properties and values as valid variables, they do not need to be written in quotes.\",\n      expected: 2,\n      settings: { hasStyles: false, style: {} },\n      options: [\n        {\n          letter: \"A\",\n          text: \"div{ background:red; }\",\n          isAnswer: true,\n        },\n        {\n          letter: \"B\",\n          text: \"div{ 'background':red; }\",\n          isAnswer: false,\n        },\n        {\n          letter: \"C\",\n          text: \".div{ background:'red'; }\",\n          isAnswer: false,\n        },\n        {\n          letter: \"D\",\n          text: `div      { background:    red;    }`,\n          isAnswer: true,\n        },\n      ],\n    },\n  },\n  // -----------------------------------------------------------------------------------------------------\n  {\n    key: \"bd63ce82-6704-4a8b-a87f-f8a0d4aaf37e\",\n    topic: {\n      title: \"CSS SYNTAX FORMAT\",\n      resources: \"https://www.w3schools.com/css/css_syntax.asp\",\n    },\n    settings: { hasHTML: false },\n    type: ANSWER_TYPES.SINGLE,\n    points: 5,\n    title: \"Which of the following is the correct format for the CSS?\",\n    possibleAnswers: {\n      feedback:\n        \"CSS syntax is composed of selector and declaration wherein selector points to the HTML element you want to style. The declaration block contains one or more declarations separated by semicolons.Each declaration includes a CSS property name and a value, separated by a colon and declaration blocks are surrounded by curly braces\",\n      settings: { hasStyles: true, style: {} },\n      options: [\n        {\n          letter: \"A\",\n          text: \"p { color: red, text-align: center; }\",\n          isAnswer: false,\n        },\n        {\n          letter: \"B\",\n          text: \"p {color: red;text-align: center;}\",\n          isAnswer: true,\n        },\n        {\n          letter: \"C\",\n          text: \"p { color -red; text-align -  center; }\",\n          isAnswer: false,\n        },\n        {\n          letter: \"D\",\n          text: \"p { color: red; text-align: center;\",\n          isAnswer: false,\n        },\n      ],\n    },\n  },\n  // -----------------------------------------------------------------------------------------------------\n  {\n    key: \"ebd5cb51-8487-4bc2-9303-3ffa8410ac33\",\n    topic: {\n      title: \"CSS SELECTORS ID\",\n      resources: \"https://www.w3schools.com/css/css_selectors.asp\",\n    },\n    settings: { hasHTML: false },\n    type: ANSWER_TYPES.SINGLE,\n    points: 5,\n    title:\n      \"Which of the following examples is the correct way to use CSS ID selector?\",\n    possibleAnswers: {\n      feedback:\n        \"Hash (#) character is being used to select an element with a specific id. An ID name cannot start with a number\",\n      settings: { hasStyles: true, style: { whitespace: \"pre-wrap\" } },\n      options: [\n        {\n          letter: \"A\",\n          text: `#1sen {\n              text-align: center;\n              color: red;\n            }\n            `,\n          isAnswer: false,\n        },\n        {\n          letter: \"B\",\n          text: `*sen1 {\n              text-align: center;\n              color: red;\n            }\n            `,\n          isAnswer: false,\n        },\n        {\n          letter: \"C\",\n          text: ` #sen1 {\n            text-align: center;\n            color: red;\n          }\n          `,\n          isAnswer: true,\n        },\n        {\n          letter: \"D\",\n          text: ` #'sen1' {\n            text-align: center;\n            color: red;\n          }\n          `,\n          isAnswer: false,\n        },\n      ],\n    },\n  },\n  // -----------------------------------------------------------------------------------------------------\n  {\n    key: \"838cf1c5-cd30-40a3-bcda-bbbf0bfd57f2\",\n    topic: {\n      title: \"CSS MARGINS\",\n      resources: \" https://www.w3schools.com/css/css_margin.asp\",\n    },\n    settings: { hasHTML: false },\n    type: ANSWER_TYPES.MULTIPLE,\n    points: 10,\n    title:\n      \" Which of the following can be a possible value for margin properties? Select all that apply. \",\n    possibleAnswers: {\n      expected: 2,\n      feedback: \"B and D do not exist as values in CSS margin properties.\",\n      settings: { hasStyles: false, style: {} },\n      options: [\n        {\n          letter: \"A\",\n          text: \"auto\",\n          isAnswer: true,\n        },\n        {\n          letter: \"B\",\n          text: \"?\",\n          isAnswer: false,\n        },\n        {\n          letter: \"C\",\n          text: \"%\",\n          isAnswer: true,\n        },\n        {\n          letter: \"D\",\n          text: \"implemement\",\n          isAnswer: false,\n        },\n      ],\n    },\n  },\n  // --------------------------------------------------------------------------------------------------------\n  {\n    key: \"57991021-406a-4f34-964e-37c803d7a254\",\n    topic: {\n      title: \"CSS PROPERTIES\",\n      resources:\n        \"https://stackoverflow.com/questions/4718342/lots-of-dom-hidden-vs-display-none#:~:text=Because%20display%3A%20none%20actually%20removes,but%20they're%20still%20there.\",\n    },\n    settings: { hasHTML: true },\n    type: ANSWER_TYPES.TEXT_ENTRY,\n    points: 10,\n    title: `\n        <span style='font-size:30px'>Using the editor provided below, assign a css property to a <b>div</b>\n        with a class name <b>kula</b> in order to make disappear, and removed\n        from the DOM.</span><br/>\n     `,\n    possibleAnswers: {\n      feedback:\n        \"If you specify 'display: none', the browser does not take that element into consideration when painting.\",\n      settings: { hasStyles: false, style: {} },\n      correctAnswer: \".kula{display:none;}\",\n    },\n  },\n];\n","export const NumToAlpha = (num) => {\n  switch (num) {\n    case 0:\n      return \"A\";\n    case 1:\n      return \"B\";\n    case 2:\n      return \"C\";\n    case 3:\n      return \"D\";\n    case 4:\n      return \"E\";\n\n    default:\n      return \"...\";\n  }\n};\n","import React, { Component } from \"react\";\nimport { NumToAlpha } from \"../db/keys\";\nimport { ANSWER_TYPES } from \"../db/questions-db\";\n\nexport default class DisplayMaker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null,\n      multiSelected: [],\n      textEntry: \"\",\n    };\n  }\n\n  handleOnChange = (e) => {\n    this.handleOnItemSelected(e.target.value);\n  };\n\n  createDisplayForTextEntryAnswers() {\n    return (\n      <textarea\n        placeholder=\"#Write your css here...\"\n        className=\"text-entry-box\"\n        onChange={this.handleOnChange}\n      >\n        {this.props.chosenAnswer}\n      </textarea>\n    );\n  }\n\n\n  pushAnswerToState(key, answer) {\n    const { selected } = this.state;\n    if (selected && selected.key === key) {\n      // answer has already been clicked before, user wants to remove it\n      this.handleOnItemSelected(null);\n    } else {\n      // user is now choosing an answer\n      this.handleOnItemSelected({ ans: answer, key });\n    }\n  }\n\n  createDisplayForSingleQuestion() {\n    const { question, answers, reviewMode } = this.props;\n    return answers.map((answer, index) => {\n      const letter = NumToAlpha(index);\n      const id = question.key + \"->\" + letter;\n      return (\n        <p\n          className={`one-answer ${this.reviewAnswerAndGetProps(id, answer)} ${\n            reviewMode && answer.isAnswer ? `chosen-answer-right` : \"\"\n          }`}\n          key={index.toString()}\n          onClick={() => this.pushAnswerToState(id, answer)}\n        >\n          <b>{letter}.</b> {answer.text}\n        </p>\n      );\n    });\n  }\n\n  pushMultipleAnswersToState(key, answer) {\n    var selected = this.props.chosenAnswer || [];\n    const obj = { ans: answer, key };\n    const found = selected.filter((ans) => ans.key === key);\n    if (found.length > 0) {\n      // if answer has already been selected, remove from the list of selected\n      const rem = selected.filter((ans) => ans.key !== key);\n      this.handleOnItemSelected(rem);\n    } else {\n      // answer has not been selected, so go ahead and add\n      let ready = [...selected, obj];\n      this.handleOnItemSelected(ready);\n    }\n  }\n\n  answerIsSelected(answerKey) {\n    const { type } = this.props;\n    const selected = this.props.chosenAnswer;\n    // const multi = this.state.multiSelected || [];\n    if (type === ANSWER_TYPES.SINGLE) {\n      return !selected ? false : selected.key === answerKey;\n    } else if (type === ANSWER_TYPES.MULTIPLE) {\n      const isIn = selected && selected.filter((ans) => ans.key === answerKey);\n      return selected && !!isIn.length;\n    }\n  }\n\n  reviewAnswerAndGetProps(id, answer) {\n    const { reviewMode } = this.props;\n    const ansIsSelected = this.answerIsSelected(id);\n    if (reviewMode && ansIsSelected && !answer.isAnswer)\n      return \"chosen-answer-wrong\";\n    if (!reviewMode && ansIsSelected) return \"chosen-answer-active\";\n  }\n\n  createDisplayForMultipleAnswerQuestion() {\n    const { question, answers, reviewMode } = this.props;\n    return (answers || []).map((answer, index) => {\n      const letter = NumToAlpha(index);\n      const id = question.key + \"->\" + letter;\n      return (\n        <p\n          className={`one-answer ${this.reviewAnswerAndGetProps(id, answer)} ${\n            reviewMode && answer.isAnswer ? `chosen-answer-right` : \"\"\n          }`}\n          key={index.toString()}\n          onClick={() => this.pushMultipleAnswersToState(id, answer)}\n        >\n          <b>{letter}.</b> {answer.text}\n        </p>\n      );\n    });\n  }\n\n  handleOnItemSelected = (data) => {\n    const { onAnswered, reviewMode } = this.props;\n    if (!onAnswered || reviewMode) return;\n    onAnswered(data);\n  };\n\n  renderContent() {\n    const { type } = this.props;\n    switch (type) {\n      case ANSWER_TYPES.MULTIPLE:\n        return this.createDisplayForMultipleAnswerQuestion();\n      case ANSWER_TYPES.SINGLE:\n        return this.createDisplayForSingleQuestion();\n      case ANSWER_TYPES.TEXT_ENTRY:\n        return this.createDisplayForTextEntryAnswers();\n      default:\n        return <p>.... Uknown ...</p>;\n    }\n  }\n  render() {\n    return <div>{this.renderContent()} </div>;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/cup.d0c33ca1.png\";","export default __webpack_public_path__ + \"static/media/trash.dfebb0e5.jpeg\";","import React, { Component } from \"react\";\nimport Confetti from \"react-confetti\";\nimport cup from \"./../media/cup.png\";\nimport trash from \"./../media/trash.jpeg\";\nexport default class CompletionPage extends Component {\n  renderLoaders() {\n    const { sheet } = this.props;\n    return (sheet || []).map((obj, index) => {\n      return (\n        <div key={index.toString()} style={{ marginTop: 6 }}>\n          <h3>\n            <a\n            rel=\"noreferrer\"\n              target=\"_blank\"\n              href={obj.question.topic.resources}\n              style={obj.wasRight ? { color: \"green\" } : { color: \"maroon\" }}\n            >\n              {obj.question.topic.title}\n            </a>\n          </h3>\n          <div style={{ width: \"70%\" }}>\n            <div\n              style={\n                obj.wasRight\n                  ? { border: \"solid 2px green\", width: \"100%\", height: 20 }\n                  : { border: \"solid 2px maroon\", width: \"100%\", height: 20 }\n              }\n            >\n              <div\n                className=\"loader\"\n                style={\n                  obj.wasRight\n                    ? { width: \"80%\", height: 16, background: \"green\" }\n                    : { width: \"15%\", height: 16, background: \"maroon\" }\n                }\n              ></div>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  calculateTotal() {\n    const { sheet } = this.props;\n    var earned = 0;\n    var total = 0;\n    (sheet || []).forEach((obj) => {\n      earned += obj.pointsEarned;\n      total += obj.question.points;\n    });\n\n    return { score: Number(earned / total) * 100, total, earned };\n  }\n  render() {\n    const { score } = this.calculateTotal();\n    return (\n      <div className=\"complete-modal-container\">\n        <div style={{ zIndex: 14 }}>\n          <Confetti numberOfPieces={score < 50 ? 30 : 300} />\n        </div>\n\n        <div className=\"complete-overlay\"></div>\n        <div className=\"complete-modal-body lift\">\n          <div className=\"row\" style={{ marginTop: \"10%\" }}>\n            <div className=\"col-md-6 col-lg-6 col-sm-6 col-xs-12\">\n              <center>\n                <img\n                  src={score < 50 ? trash : cup}\n                  style={{ height: 200 }}\n                  alt=\"reward media\"\n                />\n                <h1\n                  className=\"raw-score\"\n                  style={score < 50 ? { color: \"maroon\" } : {}}\n                >\n                  {score}%\n                </h1>\n\n                <p style={{ fontWeight: \"bold\", color: \"grey\", fontSize: 13 }}>\n                  Use the button below to compare your <br /> answers to the\n                  right ones\n                </p>\n                <button\n                  className=\"review-work-btn\"\n                  onClick={() => {\n                    this.props.toggleReviewMode(true);\n                    this.props.toggleModal(false);\n                  }}\n                >\n                  Review My Work\n                </button>\n              </center>\n            </div>\n            <div className=\"col-md-6 col-lg-6 col-sm-6 col-xs-12 phone-vanish\">\n              <h3>\n                <b>QUIZ BREAK DOWN</b>\n              </h3>\n              {this.renderLoaders()}\n              <br />\n              <br />\n              <a\n                target=\"_blank\"\n                href=\"https://www.w3schools.com/css/\"\n                style={{\n                  fontSize: 26,\n                  textDecoration: \"underline\",\n                  color: \"maroon\",\n                }}\n                rel = \"noreferrer\"\n              >\n                Resources To Learn From\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { ANSWER_TYPES } from \"../db/questions-db\";\n\nexport default class Validator {\n  constructor(question, answer) {\n    this.type = question.type;\n    this.answer = answer;\n    this.question = question;\n  }\n\n  answerIsCorrect() {\n    const result = {\n      question: this.question,\n      answer: this.answer,\n    };\n    var status;\n    switch (this.type) {\n      case ANSWER_TYPES.MULTIPLE:\n        status = this.validateMultipleAnswerQuestion();\n        return {\n          ...result,\n          status: status.status,\n          points: status.points,\n          correct: status.correct,\n          wrong: status.wrong,\n        };\n\n      case ANSWER_TYPES.TEXT_ENTRY:\n        status = this.validateEntryAnswerQuestion();\n        return {\n          ...result,\n          points: status ? this.question.points : 0,\n          status,\n        };\n\n      case ANSWER_TYPES.SINGLE:\n        status = this.validateSingleType();\n        return { ...result, status, points: status ? this.question.points : 0 };\n\n      case ANSWER_TYPES.DRAG_AND_DROP:\n        break;\n\n      default:\n        return result;\n    }\n  }\n\n  /**\n   * @TODO remember to comment later...\n   */\n  validateEntryAnswerQuestion() {\n    if (!this.answer || this.answer.trim() === \"\") return false;\n    const deflated = this.answer.replace(/\\s/g, \"\");\n    return deflated === this.question.possibleAnswers.correctAnswer;\n  }\n\n  /**\n   * The @validateSingleType function is used to validate questions that expect a single\n   * answer from player\n   * Things To Note:\n   * ----------------\n   * In a single-answer-question, the answer is expected to come as an object.\n   * How it works\n   * -------------\n   * Every answer object has an @isAnswer (a @boolean ) field which is used to verify if the chosen answer is right\n   *\n   * @return @Boolean that represents the state of player's answer\n   *\n   */\n  validateSingleType() {\n    return this.answer.ans.isAnswer;\n  }\n\n  /**\n   * The @validateMultipleAnswerQuestion function is used to validate questions that expect multiple answers from players\n   * Things To Note:\n   * ----------------\n   * In a multiple-answer-question, the answer is expected to come in an array -- an array of objects.\n   * How it works:\n   * --------------\n   * Obtain the number of expected answers from the question object (A numerical value)\n   * Loop over array of the answers that were provided by the player\n   * There are a few things that can happen when we loop over the answers:\n   * Case 1:\n   * A player manages to choose all the correct answers\n   * Case 2:\n   * A player manages to get some answers right, and others wrong\n   * Case 3:\n   * A player chooses only wrong answers\n   * How is it known if an answer is right or not?\n   * ----------------------------------------------\n   * All answer objects come with a field @isAnswer (a @boolean ) that indicates whether or not the answer is right\n   * Hence while going over each answer the user provided, we just need to verify by the using field @isAnswer\n   * If the answer is right, push the current answer object that the loop cursor is on, into an array called @correct\n   * If the answer is wrong, push the current answer object into an array called @wrong\n   * The @correct and @wrong arrays will later be used in a part of the UI to inform the player of which answers they got right or wrong\n   * How points are determined for a multiple-answer-question?\n   * ---------------------------------------------------------\n   * Things To Note:\n   * Every multiple-answer-question object comes with a @possibleAnswers field that is also an object.\n   * This  object contains another field named @expected (numerical value) that indicates how many correct answers are expected.\n   * With this, we can easily determine how many points were obtained by doing the following\n   * To obtain the points for all cases:\n   * ---------------------------------------\n   *  let a = number of items in the correct answer array, w= number of items that a player chose, but were wrong b = expected number of answers, p = the total number of @points [Provided by question object] that can be obtained by fully answering the question.\n   * Hence total points earned by user : PE = (a/b) * p\n   * With this formular:\n   * A fully answered question is  = maximum points attainable = p\n   * A partially answered question is  = some value  > 0 but < p\n   * A wrongly answered question is exactly = 0\n   * Now @return an object with fields\n   * @status : which is a direct relationship of the number of points earned in Boolean(PE),\n   * @correct : which is the array of all chosen correct answers by player ( to be used later)\n   * @wrong : an array of all wrong answers chosen by player ( to be used later )\n   * --------------------------------------\n   * NB: Getting some and not all the answers right still gives a validation of \"true\" in the @status field\n   */\n  validateMultipleAnswerQuestion() {\n    const { possibleAnswers, points } = this.question;\n    const answers = this.answer || [];\n    var correct = [];\n    var wrong = [];\n    // console.log(\"i am the answers\", answers);\n    // console.log(\"i am the deafults\", this.answer)\n    answers.forEach((answer) => {\n      if (answer.ans.isAnswer) correct.push(answer);\n      else wrong.push(answer);\n    });\n    var pointsEarned =\n      ((Number(correct.length) - Number(wrong.length)) /\n        Number(possibleAnswers.expected)) *\n      Number(points);\n    return {\n      status: !!(pointsEarned <= 0 ? 0 : pointsEarned),\n      correct,\n      wrong,\n      points: pointsEarned <= 0 ? 0 : pointsEarned,\n    };\n  }\n}\n","import {\n  faCheckCircle,\n  faLongArrowAltLeft,\n  faLongArrowAltRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { Component } from \"react\";\nimport { questions } from \"../db/questions-db\";\nimport DisplayMaker from \"../factory/DisplayMaker\";\nimport CompletionPage from \"./CompletionPage\";\nimport Validator from \"./../factory/Validator\";\nconst FORWARD = \"FORWARD\";\nconst BACK = \"BACK\";\nexport default class Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: questions,\n      currentQuestion: questions[0],\n      currentQuestionIndex: 0,\n      questionReported: false,\n      reportError: false,\n      complete: false,\n      points: 0, // player's points earned over the entire quiz\n      playerSheet: [],\n      reviewMode: false,\n      playerName: \"\",\n    };\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.moveToQuestion = this.moveToQuestion.bind(this);\n    this.onAnswered = this.onAnswered.bind(this);\n    this.toggleReviewMode = this.toggleReviewMode.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentDidMount() {\n    const params = this.props.location;\n    this.setState({ userName: params.data && params.data.userName });\n  }\n  toggleModal(val) {\n    this.setState({ complete: val });\n  }\n  getQuestionButtonClasses(key) {\n    const { currentQuestion } = this.state;\n    var classes = \"\";\n    if (currentQuestion.key === key) classes += \" q-in-motion\";\n    return classes;\n  }\n  renderQuestions() {\n    const { questions } = this.state;\n    return questions.map((Q, index) => {\n      return (\n        <div\n          className={`q-default one-question  ${this.getQuestionButtonClasses(\n            Q.key\n          )}`}\n          key={index.toString()}\n          onClick={() => this.moveToQuestion(index, null)}\n        >\n          <p>Question {index + 1}</p>\n        </div>\n      );\n    });\n  }\n\n  renderQuestionTitle() {\n    const question = this.state.currentQuestion;\n    if (!question) return <span>...</span>;\n    if (question.settings.hasHTML)\n      return (\n        <h1\n          className=\"question\"\n          dangerouslySetInnerHTML={{ __html: question.title }}\n        ></h1>\n      );\n    return <h1 className=\"question\">{question.title}</h1>;\n  }\n\n  submitReport() {\n    const { messageBody, email } = this.state;\n    if (!messageBody || !email) return this.setState({ reportError: true });\n    this.setState({ reportError: false, questionReported: true });\n  }\n\n  handleOnChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  showFootItems() {\n    const { playerSheet, questions, reviewMode, currentQuestion } = this.state;\n\n    if (reviewMode) {\n      const queInView = this.getPlayersChosenAnswersForQuestion();\n      return (\n        <>\n          <center>\n            <h4>\n              <b>\n                {Number(queInView.pointsEarned)} /{\" \"}\n                {Number(queInView.question.points)}\n              </b>\n            </h4>\n          </center>\n          <h4\n            style={{\n              fontWeight: \"bold\",\n              color: \"green\",\n              textDecoration: \"underline\",\n            }}\n          >\n            FEEDBACK\n          </h4>\n          <p className=\"feedback\">{currentQuestion.possibleAnswers.feedback}</p>\n        </>\n      );\n    }\n    if (playerSheet.length === questions.length) {\n      return (\n        <button\n          className=\"finish-btn\"\n          onClick={() => this.setState({ complete: true })}\n        >\n          Finsh, See My Result\n        </button>\n      );\n    }\n\n    return (\n      <center>\n        <button\n          className=\"round-btns lift-slightly\"\n          onClick={() => this.moveToQuestion(null, BACK)}\n        >\n          <FontAwesomeIcon icon={faLongArrowAltLeft} />\n        </button>\n        <button\n          className=\"round-btns lift-slightly\"\n          onClick={() => this.moveToQuestion(null, FORWARD)}\n        >\n          <FontAwesomeIcon icon={faLongArrowAltRight} />\n        </button>\n      </center>\n    );\n  }\n\n  setNewQuestion(index, question) {\n    this.setState({ currentQuestion: question, currentQuestionIndex: index });\n  }\n  moveToQuestion(index, direction) {\n    const { currentQuestionIndex } = this.state;\n    if (!direction)\n      return this.setNewQuestion(index, this.state.questions[index]);\n    var ind;\n    if (direction === FORWARD) {\n      ind = currentQuestionIndex + 1;\n      if (ind < this.state.questions.length)\n        this.setNewQuestion(ind, this.state.questions[ind]);\n    } else if (direction === BACK) {\n      ind = currentQuestionIndex - 1;\n      if (currentQuestionIndex > 0)\n        this.setNewQuestion(ind, this.state.questions[ind]);\n    }\n  }\n\n  onAnswered(data) {\n    if (!data) return;\n    const { currentQuestion } = this.state;\n\n    var points = this.state.points;\n    const validator = new Validator(currentQuestion, data);\n    const answerState = validator.answerIsCorrect();\n    // if (currentQuestion.type === ANSWER_TYPES.TEXT_ENTRY){\n    //   this.handleEntryValidation(data, answerState);\n    //   return;\n    // }\n\n    const playerAnswerObj = {\n      // create object that is going to contain the player's answer , the question, whether they were right or wrong, and how many points they earned from the validator\n      wasRight: answerState.status,\n      question: currentQuestion,\n      questionKey: currentQuestion.key,\n      answer: data,\n      pointsEarned: answerState.points,\n      wrong: answerState.wrong,\n      correct: answerState.correct,\n    };\n    var alreadyAnsweredQuestions = this.state.playerSheet || [];\n    var currentQuestionHasBeenAnsweredBefore = alreadyAnsweredQuestions.filter(\n      (ansObj) => ansObj.questionKey === currentQuestion.key\n    );\n    if (\n      currentQuestionHasBeenAnsweredBefore &&\n      currentQuestionHasBeenAnsweredBefore.length > 0\n    ) {\n      points -= currentQuestionHasBeenAnsweredBefore.points;\n      const rem = alreadyAnsweredQuestions.filter(\n        (ansObj) => ansObj.questionKey !== currentQuestion.key\n      );\n      this.setState({ points, playerSheet: [...rem, playerAnswerObj] });\n      return;\n    }\n    if (answerState.status === true) points += points;\n    this.setState({\n      points,\n      playerSheet: [...alreadyAnsweredQuestions, playerAnswerObj],\n    });\n  }\n\n  getPlayersChosenAnswersForQuestion() {\n    const { currentQuestion, playerSheet } = this.state;\n    const found = playerSheet.filter(\n      (recordedAnswers) => recordedAnswers.questionKey === currentQuestion.key\n    );\n    return found[0] || {};\n  }\n  toggleReviewMode(val) {\n    this.setState({ reviewMode: val });\n  }\n  render() {\n    const {\n      questionReported,\n      reportError,\n      complete,\n      currentQuestion,\n    } = this.state;\n\n    return (\n      <div>\n        {complete && (\n          <CompletionPage\n            sheet={this.state.playerSheet}\n            toggleReviewMode={this.toggleReviewMode}\n            toggleModal={this.toggleModal}\n          />\n        )}\n        <div\n          className=\"container-phone-mode-fix\"\n          style={{ margin: \"0px 10%\", paddingTop: \"6%\" }}\n        >\n          {/* ---------------------------- PHONE TOP BAR ------------------------------ */}\n          {/*  this top navigation bar  will  only show in phone mode while other pc mode content dissappear */}\n          <div className=\"lift-slightly top-bar-phone pc-vanish\">\n            <img\n              src=\"https://i.pravatar.cc/200\"\n              className=\"user-profile-photo\"\n              alt=\"user's profile\"\n            />\n            <small style={{ fontWeight: \"bold\", margin: 10, fontSize: 15 }}>\n              {this.state.userName || \"...\"}\n            </small>\n          </div>\n\n          {/* ---------------------------------------------   TOPIC ---------------------------------------------- */}\n          <center>\n            <h1 className=\"phone-h1\">\n              {currentQuestion && currentQuestion.topic.title}\n            </h1>\n            <br />\n          </center>\n          <div className=\"top-line\"></div>\n          <br />\n          {/* -------------------------------  QUESTION SIDEBAR WITH PROFILE ---------------------------------------- */}\n          <div className=\"row\" style={{ marginTop: 15 }}>\n            <div\n              className=\"col-md-2 col-lg-2 col-sm-6 col-xs-12\"\n              style={{ padding: 10 }}\n            >\n              <div className=\"custom-card lift-slightly phone-vanish\">\n                <img\n                  className=\"user-profile-photo lift-slightly\"\n                  alt=\"user's profile\"\n                  src=\"https://i.pravatar.cc/200\"\n                />\n                <p>{this.state.userName || \"...\"}</p>\n              </div>\n              <div\n                className=\"all-questions-content phone-vanish\"\n                style={{ marginTop: 10 }}\n              >\n                <center>\n                  {/* <div className=\"phone-vanish\"> */}\n                  {this.renderQuestions()}\n\n                  {this.state.reviewMode && (\n                    <button\n                      style={{ width: \"100%\" }}\n                      className=\"review-work-btn\"\n                      onClick={() => this.setState({ complete: true })}\n                    >\n                      SEE SCORE\n                    </button>\n                  )}\n                  {/* </div> */}\n                </center>\n              </div>\n            </div>\n\n            {/* -----------------------------------------  MAIN QUESTION AREA ------------------------------------------ */}\n            <div\n              className=\"col-md-7 col-lg-7 col-sm-6 col-xs-12\"\n              style={{ padding: 0 }}\n            >\n              {this.renderQuestionTitle()}\n              {/* {this.renderPossibleAnswers()} */}\n\n              <DisplayMaker\n                answers={\n                  currentQuestion && currentQuestion.possibleAnswers.options\n                }\n                question={currentQuestion}\n                type={currentQuestion.type}\n                onAnswered={this.onAnswered}\n                chosenAnswer={this.getPlayersChosenAnswersForQuestion().answer}\n                reviewMode={this.state.reviewMode}\n              />\n\n              <div className=\"bottom-directions\" style={{ marginTop: 20 }}>\n                {this.showFootItems()}\n\n                {/* -------------- The directional buttons below only shows in phone mode not pc -------- */}\n                {this.state.reviewMode && (\n                  <div className=\"pc-vanish\">\n                    <center>\n                      <button\n                        className=\"round-btns lift-slightly\"\n                        onClick={() => this.moveToQuestion(null, BACK)}\n                      >\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\n                      </button>\n                      <button\n                        className=\"round-btns lift-slightly\"\n                        onClick={() => this.moveToQuestion(null, FORWARD)}\n                      >\n                        <FontAwesomeIcon icon={faLongArrowAltRight} />\n                      </button>\n                    </center>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* --------------------------------------  CONTACT US SIDEBAR -------------------------------------------- */}\n            <div className=\"col-md-3 col-lg-3 col-sm-12 col-xs-12 phone-margin-top\">\n              <div className=\"custom-card contact-us-box lift-slightly\">\n                <h3>Report A Question</h3>\n                {!questionReported && (\n                  <div>\n                    <small style={{ margin: \"8px 0px\" }}>\n                      <b>QUESTION {this.state.currentQuestionIndex + 1} </b>\n                    </small>\n                    <input\n                      type=\"email\"\n                      className=\"email-box remove-outline\"\n                      placeholder=\"Enter email...\"\n                      onChange={this.handleOnChange}\n                      name=\"email\"\n                    />\n                    <br />\n                    <p\n                      style={{\n                        width: \"100%\",\n                        textAlign: \"left\",\n                        color: \"grey\",\n                      }}\n                    >\n                      What is wrong?\n                    </p>\n                    <textarea\n                      name=\"messageBody\"\n                      onChange={this.handleOnChange}\n                      className=\"textarea remove-outline\"\n                      rows=\"10\"\n                    ></textarea>\n                  </div>\n                )}\n                {questionReported && (\n                  <center>\n                    <p\n                      style={{\n                        fontSize: 14,\n                        color: \"green\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      Your report has been sent to us, you will hear from us in\n                      3 business days\n                    </p>\n                    <FontAwesomeIcon\n                      icon={faCheckCircle}\n                      style={{ fontSize: 50 }}\n                      color=\"green\"\n                    />\n                  </center>\n                )}\n\n                {reportError && (\n                  <p style={{ color: \"maroon\" }}>\n                    Please fill out all appropriate fields\n                  </p>\n                )}\n                <button\n                  className=\"send-btn\"\n                  onClick={() => this.submitReport()}\n                >\n                  SEND\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import {\n  Redirect,\n  Route,\n  BrowserRouter as Router,\n  Switch,\n} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport LandingPage from \"./pages/LandingPage\";\nimport Play from \"./pages/Play\";\nimport CompletionPage from \"./pages/CompletionPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/home\" component={LandingPage} />\n          <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n          <Route exact path=\"/play\" component={Play} />\n          <Route exact path=\"/complete\" component={CompletionPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}